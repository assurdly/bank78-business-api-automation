pm.test("Status code is 400", function () {
    pm.response.to.have.status(400);
});

pm.test("Status code response is Bad Request", function () {
    pm.response.to.have.status('Bad Request');
});

var jsonData = pm.response.json();

pm.test("Response body is not empty", function () {   
    pm.expect(jsonData).to.be.an('object');
    pm.expect(jsonData.hasResult).to.be.a('boolean');
    pm.expect(jsonData.result).to.be.null;
    pm.expect(jsonData.resultType).to.be.a('string');
    pm.expect(jsonData.message).to.be.a('string');
    pm.expect(jsonData.validationMessages).to.be.an('array');
    pm.expect(jsonData.successful).to.be.a('boolean');
});

pm.test("hasResult is False", function () {
    pm.expect(jsonData.hasResult).to.eql(false);
});

pm.test("validationMessages is not empty", function () {
    pm.expect(jsonData.validationMessages[0]).to.eql("The model field is required.",
        "Error converting value \"\" to type 'Library.Common.Models.StakeholderTypeEnum'. Path 'stakeholderType', line 8, position 23.");
});

pm.test("Result type is ValidationError", function () {
    pm.expect(jsonData.resultType).to.eql('ValidationError');
});

pm.test("Message is Response has validation errors", function () {
    pm.expect(jsonData.message).to.eql('Response has validation errors');
});

pm.test("Response is unsuccessful", function () {
    pm.expect(jsonData.successful).to.eql(false);
});